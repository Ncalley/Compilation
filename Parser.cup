/* GRAMMAIRE du langage PONY
 * PROJET : CALLEY Nicolas - ADICEOM Audrey - FERRY Emeline - RAGAZZI InÃ¨s - FERNANDEZ Joyce
 */ 
package fr.ul.miage.exemple.generated;

//!!!! aux crochets, on pose CO = [, CF = ], ACO = { et ACF = }, PO = (, PF = )

/* la grammaire */
terminal recognitionLanguageStatement, mainStatement, endLineStatement;
terminal CO, CF, ACO, ACF, PO, PF, VIR;
terminal additionOperator,substractionOperator, multiplicationOperator, divisionOperator;
	// +, -, *, /
terminal higherThanIdentifier, higherEqualThanIdentifier, lesserThanIdentifier, lesserEqualThanIdentifier;
	//>,≥,<,≤
terminal equalIdentifier, differentIdentifier, orIdentifier, andIdentifier, xorIdentifier;
	// =,!=,or, and, xor
terminal notIdentifier;
terminal idf, number, vide, bool, text; // nom de variable, commence forcément par une minuscule
terminal numberIdentifier, booleanIdentifier, textIdentifier;
	//boolean, numerique, String, rien
terminal affectationIdentifier, returnIdentifier, ifIdentifier, elseIdentifier, whileIdentifier;

non terminal Pony;
non terminal Content;
non terminal MainFunction;
non terminal Instruction;
non terminal AffectationStatement, AffectationSecondPart, IfStatement, ElseStatement, WhileLoopStatement;
non terminal IfReturn;
//non terminal Type;
non terminal Expression, BooleanExpression;
non terminal Operator, BooleanOperator;
non terminal Function, Param, UnTypedParam, TextFunction, BoolFunction, FunctionStatement, TextRecursive;


start with Pony;

// the language itself.

Pony ::= recognitionLanguageStatement endLineStatement Content;

// A mix composed of the main function and instructions and functions.

Content ::= MainFunction
	| AffectationStatement endLineStatement Content 
	| Function Content
	| TextFunction Content
	| BoolFunction Content
	| /*(nothing)*/;

// the main function of the program, may use other functions.


MainFunction ::= mainStatement CO CF ACO Instruction ACF ;
	//profil :  main[] { [..] }

// classic function with a given return type (may be void), the return is always
// at the end of the function for the moment (can't be used inside of a loop).
 
TextFunction ::= textIdentifier idf CO Param CF ACO Instruction returnIdentifier TextRecursive endLineStatement ACF
	;

BoolFunction ::= booleanIdentifier idf CO Param CF ACO Instruction returnIdentifier BooleanExpression endLineStatement ACF
	| booleanIdentifier idf CO Param CF ACO Instruction returnIdentifier idf endLineStatement ACF
	;

Function ::= numberIdentifier idf CO Param CF ACO Instruction returnIdentifier Expression endLineStatement ACF
	| vide idf CO CF ACO Instruction ACF;

FunctionStatement ::= idf CO UnTypedParam CF ;

TextRecursive ::= text
	| text additionOperator FunctionStatement;


Param ::= numberIdentifier Expression VIR Param
	| booleanIdentifier bool VIR Param
	| textIdentifier text VIR Param
	| numberIdentifier Expression
	| booleanIdentifier bool
	| textIdentifier text
	|/*nothing*/
	;
	
UnTypedParam ::= Expression VIR UnTypedParam
	| bool VIR UnTypedParam
	| text VIR UnTypedParam
	| Expression
	| bool
	| text
	| /* nothing */;

// Any loop, variable manipulation or printStatement

Instruction ::= AffectationStatement endLineStatement Instruction
	| IfStatement Instruction
	| WhileLoopStatement Instruction
	| /* nothing */ 
	;

// The binding of a value to a variable 

AffectationStatement ::= numberIdentifier idf AffectationSecondPart
	| idf affectationIdentifier Expression
;

AffectationSecondPart ::= affectationIdentifier Expression
	| /*(nothing)*/;

// Mathematical operation (non boolean) recursively builded with operators
 
Expression ::= PO Expression PF 
	| PO Expression PF  Operator Expression
	| number Operator Expression
	| idf Operator Expression
	| FunctionStatement Operator Expression 
	| number
	| idf
	| FunctionStatement
	;

//Mathematical operators, used in expressions

Operator ::= additionOperator
	| substractionOperator
	| multiplicationOperator
	| divisionOperator;

// A simple if

IfStatement ::= ifIdentifier CO BooleanExpression CF ACO Instruction IfReturn ACF
	|  ifIdentifier CO BooleanExpression CF ACO Instruction IfReturn ACF ElseStatement;
	//profil : if [i<2]{...}

ElseStatement ::= elseIdentifier ACO Instruction IfReturn ACF;

IfReturn ::= returnIdentifier TextRecursive endLineStatement
	| returnIdentifier BooleanExpression endLineStatement
	| returnIdentifier Expression endLineStatement
	| /* nothing*/;

//Boolean operation recursively builded with operators

BooleanExpression ::= bool
	| Expression BooleanOperator Expression
	| notIdentifier BooleanExpression
	| bool equalIdentifier BooleanExpression
	| bool differentIdentifier BooleanExpression
		;

//Boolean operator, used in booleanExpressions

BooleanOperator ::= equalIdentifier
	| higherThanIdentifier
	| higherEqualThanIdentifier
	| lesserThanIdentifier
	| lesserEqualThanIdentifier
	| differentIdentifier
	| orIdentifier
	| andIdentifier
	| xorIdentifier;

// The basic while loop

WhileLoopStatement ::= whileIdentifier CO BooleanExpression CF ACO Instruction ACF;
	//profil : while [i<2]{...}

