/* GRAMMAIRE du langage PONY
 * PROJET : CALLEY Nicolas - ADICEOM Audrey - FERRY Emeline - RAGAZZI Inès - FERNANDEZ Joyce
 */ 
 
package fr.ul.miage.exemple.generated;



/* la grammaire */

/* Terminals */



terminal CO, CF, ACO, ACF,PO, PF, VIR, IN; 
	//on pose CO = [, CF = ], ACO = { et ACF = }, PO = (, PF = ), VIR= ,IN=in
terminal higherThanIdentifier, higherEqualThanIdentifier, lesserThanIdentifier, lesserEqualThanIdentifier;
	//>,≥,<,≤
terminal equalIdentifier, differentIdentifier, orIdentifier, andIdentifier, xorIdentifier;
	// =,!=,or, and, xor
terminal  affectationIdentifier, incrementIdentifier, decrementIdentifier, printIdentifier, returnIdentifier,whileIdentifier, ifIdentifier,forIdentifier;
	//<- ; ++; --; affichage; return; while; if; for; 
terminal additionOperator,substractionOperator, multiplicationOperator, divisionOperator;
	// +, -, *, /
terminal recognitionLanguageStatement, mainStatement, endLineStatement; 
	//recognitionLanguageStatement : begin of Ponny language #Ponny#  , mainStatement: début programme éxecution, endLineStatement : ; (charactère de fin de ligne en java)
terminal idf, number, text, boolean;
	//                                  bloc de texte entre ' ', objet de retour

terminal booleanIdentifier, numberIdentifier,textIdentifier, void;
	//boolean, numerique, String

	
/*Non terminaux*/

non terminal Pony; //debut 
non terminal content;
non terminal mainFunction;
non terminal instruction;
non terminal ifStatement, whileLoopStatement, forLoopStatement, affectationStatement,incrementStatement, decrementStatement, printStatement;
non terminal booleanExpression, expression, booleanExpressionFor;
non terminal function, return, wellTypedObject;  
non terminal operator, booleanOperator;
non terminal Type, wellReturnObject;

start with Pony;

// the language itself.

Pony ::= recognitionLanguageStatement endLineStatement content;
	//profil : #PONY#; [...]

// A mix composed of the main function and instructions and functions.

content ::= mainFunction //on dit que la main fonction c'est la fin, termine 
	| function content
	| /*(nothing)*/;


// the main function of the program, may use other functions.


mainFunction ::= mainStatement CO CF ACO instruction ACF ;
	//profil :  main[] { [..] }

// classic function with a given return type (may be void), the return is always
// at the end of the function for the moment (can't be used inside of a loop).
 
function ::= function function //signature de la fonction
	| Type idf CO param CF ACO instruction return ACF
	// int f[] {...return int}
	| void idf CO CF ACO instruction ACF;
	//void f[] {...}

param ::= Type idf
	| param VIR param
	|/*nothing*/
	;
	

// Something given by a function

return ::= returnIdentifier wellReturnObject endLineStatement; 

wellReturnObject ::= idf
	| boolean
	| text
	| number
	| /*nothing*/
	;





// Any loop, variable manipulation or printStatement

instruction ::= instruction instruction
	| ifStatement
	| whileLoopStatement
	| forLoopStatement
	| affectationStatement endLineStatement
	| incrementStatement endLineStatement
	| printStatement endLineStatement;

// A simple if

ifStatement ::= ifIdentifier CO booleanExpression CF ACO instruction ACF;

// The basic while loop

whileLoopStatement ::= whileIdentifier CO booleanExpression CF ACO instruction ACF;

// The basic for loop

forLoopStatement ::= forIdentifier CO booleanExpressionFor CF ACO instruction ACF ;//penser au foreach

booleanExpressionFor ::= idf IN CO number VIR number CF VIR number ;
	//profil : i in [1,10], 1 <=> i va de 1 à 10 par pas de 1




// The binding of a value to a variable 

affectationStatement ::= numberIdentifier idf affectationIdentifier expression endLineStatement
	| textIdentifier idf affectationIdentifier text endLineStatement
	| booleanIdentifier idf affectationIdentifier booleanExpression endLineStatement
	| Type idf affectationIdentifier idf CO param CF endLineStatement;

// Incrementation of a number (must be applied to a number-containing variable)

incrementStatement ::= idf incrementIdentifier endLineStatement;

// Decrementation of a number (same constraints as the incrementation)

decrementStatement ::= idf decrementIdentifier endLineStatement;

// Used to print something in the console (may be useless without high enough language)

printStatement ::= printIdentifier idf endLineStatement
	| printIdentifier number endLineStatement
	| printIdentifier text endLineStatement
	| printIdentifier booleanExpression endLineStatement;

// Mathematical operation (non boolean) recursively builded with operators
 
expression ::= PO expression PF
	| expression operator expression
	| number
	| idf;

//Mathematical operators, used in expressions

operator ::= additionOperator
	| substractionOperator
	| multiplicationOperator
	| divisionOperator;

//Boolean operation recursively builded with operators

booleanExpression ::= booleanExpression booleanOperator booleanExpression
	| expression booleanOperator expression
	| boolean ;

//Boolean operator, used in booleanExpressions

booleanOperator ::= equalIdentifier
	| higherThanIdentifier
	| higherEqualThanIdentifier
	| lesserThanIdentifier
	| lesserEqualThanIdentifier
	| differentIdentifier
	| orIdentifier
	| andIdentifier
	| xorIdentifier;

Type ::= booleanIdentifier
	| numberIdentifier
	| textIdentifier
	;
