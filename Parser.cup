/* GRAMMAIRE du langage PONY
 * PROJET : CALLEY Nicolas - ADICEOM Audrey - FERRY Emeline - RAGAZZI InÃ¨s - FERNANDEZ Joyce
 */ 
 
package fr.ul.miage.exemple.generated;

/*import java.util.LinkedList;
import java.util.HashMap;*/


/*action code {: Tree arbre_prgme = new Tree("PROGRAMME",null,null,null,null,null,null);
				LinkedList<Tree> liste_Inter= new LinkedList<Tree>();
				Integer rangIf=0; //pour incrémenter les if et tout
				Integer rangf=0;
				LinkedList<Tree> liste_InterText= new LinkedList<Tree>();
			:}
				;*/



/* la grammaire */


terminal recognitionLanguageStatement, mainStatement, endLineStatement;
terminal CO, CF, ACO, ACF, PO, PF, VIR;
terminal additionOperator,substractionOperator, multiplicationOperator, divisionOperator;
	// +, -, *, /

terminal higherThanIdentifier, higherEqualThanIdentifier, lesserThanIdentifier, lesserEqualThanIdentifier;
	//>,≥,<,≤
terminal equalIdentifier, differentIdentifier, orIdentifier, andIdentifier, xorIdentifier;
	// =,!=,or, and, xor

terminal notIdentifier;
terminal idf, number, vide, bool, text; // nom de variable, commence forcément par une minuscule
terminal numberIdentifier, booleanIdentifier, textIdentifier;
	//boolean, numerique, String, rien
terminal affectationIdentifier, returnIdentifier, ifIdentifier, elseIdentifier, whileIdentifier;

non terminal Pony;
non terminal Content;
non terminal MainFunction;

non terminal /*LinkedList <Tree>*/ Instruction,ElseStatement, TextRecursive;
non terminal AffectationSecondPart , WhileLoopStatement;
//non terminal Type;
non terminal Expression, Facteur, Atome; 
non terminal /*Tree*/ BooleanExpression;
non terminal /*Integer*/ Param;
non terminal AffectationStatement,IfStatement,IfReturn;
non terminal BooleanOperator;
non terminal Function, UnTypedParam, TextFunction, BoolFunction, FunctionStatement;




start with Pony;

// the language itself.

Pony ::= recognitionLanguageStatement endLineStatement Content;

// A mix composed of the main function and instructions and functions.

Content ::= MainFunction
	| AffectationStatement endLineStatement Content 
	| Function Content
	| TextFunction Content
	| BoolFunction Content
	| /*(nothing)*/;


// the main function of the program, may use other functions.


MainFunction ::= mainStatement /*: main_fct*/ CO CF ACO Instruction/*:liste_instruction*/ ACF 
		/*{:
			Data d=new Data(main_fct,"fonction","void",null,null,null,1);
			Tree t1=new Tree(main_fct,1,null,"fonction",d,null,null);  
			arbre_prgme.tds.add(d); 
			arbre_prgme.l.add(t1);
			t1.l.add(liste_instruction);
		:}*/
		;

	//profil :  main[] { [..] }

// classic function with a given return type (may be void), the return is always
// at the end of the function for the moment (can't be used inside of a loop).
 

TextFunction ::= textIdentifier idf/*:id*/ CO Param/*:p*/ CF ACO Instruction returnIdentifier TextRecursive/*:res*/ endLineStatement ACF 
		/*{:
			rangf++;
			Data d=new Data(id,"Text",p,0,null,rangf);
			Tree t1=new Tree(id,rangf,null,"fonction",d,null,null);  
			arbre_prgme.tds.add(d); 
			arbre_prgme.l.add(t1);
			t1.l.add(liste_instruction);
		:}*/
	;

BoolFunction ::= booleanIdentifier idf/*:id*/ CO Param CF ACO Instruction returnIdentifier BooleanExpression/*:res*/ endLineStatement ACF 
	| booleanIdentifier idf/*:id*/ CO Param CF ACO Instruction returnIdentifier idf/*:res*/ endLineStatement ACF 
	;

Function ::= numberIdentifier idf/*:id*/ CO Param CF ACO Instruction returnIdentifier Expression/*:res*/ endLineStatement ACF 
	| vide idf/*:id*/ CO CF ACO Instruction ACF ;

FunctionStatement ::= idf/*:id*/ CO UnTypedParam CF;


TextRecursive ::= text /*: t*/
	/*{: 
			liste_InterText.removeAll();
			Data d=new Data("t","globale/locale","Text",null,null,t,null);
			Tree t=new Tree("Text",t,null,new Reference("Text",d),null,null); 
			liste_InterText.add(t);
			arbreProgramme.tds.add(d);
			RESULT = liste_InterText;
		:}*/
	| text/*:t*/ additionOperator FunctionStatement/*:f*/
/*{: 
			liste_InterText.removeAll();
			Data d=new Data("t","globale/locale","Text",null,null,t+f,null);
			Tree t=new Tree("Text",t,null,new Reference("Text",d),null,null); 
			liste_InterText.add(t);
			arbreProgramme.tds.add(d);
			RESULT = liste_InterText;
		:}*/;


Param ::= numberIdentifier Expression VIR Param/*:p {:RESULT=new Integer(p+1):}*/
	| booleanIdentifier bool VIR Param/*:p {:RESULT=new Integer(p+1):}*/
	| textIdentifier text VIR Param/*:p {:RESULT=new Integer(p+1):}*/
	| numberIdentifier Expression /*{:RESULT=1:}*/
	| booleanIdentifier bool /*{:RESULT=1:}*/
	| textIdentifier text /*{:RESULT=1:}*/
	|/*nothing*/ /*{:RESULT=0:}*/
	;
	
UnTypedParam ::= Expression VIR UnTypedParam
	| bool VIR UnTypedParam
	| text VIR UnTypedParam
	| Expression
	| bool
	| text
	| /* nothing */;

// Any loop, variable manipulation or printStatement

Instruction ::= AffectationStatement /*: a*/ endLineStatement Instruction /*: inst*/
	/*{: 
			liste_Inter.removeAll()
			liste_Inter.add(a)
			for (Tree t : inst) {
				if (t != null) {
					liste_Inter.add(t);
				}
			}
			RESULT = liste_Inter;
		:}*/
	| IfStatement /*:if*/ Instruction/*:inst*/
	/*{: 
			liste_Inter.removeAll()
			liste_Inter.add(if)
			for (Tree t : inst) {
				if (t != null) {
					liste_Inter.add(t);
				}
			}
			RESULT = liste_Inter;
		:}*/
	| WhileLoopStatement/*:w*/ Instruction/*:inst*/
	 	/*{: 
			liste_Inter.removeAll()
			liste_Inter.add(w)
			for (Tree t : inst) {
				if (t != null) {
					liste_Inter.add(t);
				}
			}
			RESULT = liste_Inter;
		:*/
	| /* nothing */ 
	;

// The binding of a value to a variable 

AffectationStatement ::= numberIdentifier/*:a*/ idf/*:identifiant*/ AffectationSecondPart/*:af*/
		/*{: 
			Data d=new Data(identifiant,"globale/locale","Num",null,null,af,null);
			Tree t1=new Tree("AffectationStatement",af,null,new Reference("Affectation",d),null,null);  
			first_part=new Tree(identifiant,af,null,null,null,null);  
			arbre_prgme.tds.add(d); 
			arbre_prgme.l.add(t1);
		:}*/

	| idf affectationIdentifier Expression
;

AffectationSecondPart ::= affectationIdentifier Expression/*:e {:RESULT=e:}*/
	| /*(nothing)*/ /*{:RESULT=null:}*/;

	


// Mathematical operation (non boolean) recursively builded with operators

	
Expression ::= Expression additionOperator Facteur
	| Expression substractionOperator Facteur
	| Facteur
	;

Facteur ::= Facteur multiplicationOperator Atome
	| Facteur divisionOperator Atome
	| Atome;
	
Atome ::= number 
	| PO Expression PF
	| FunctionStatement
	| idf;


// A simple if


IfStatement ::= ifIdentifier CO BooleanExpression/*:condit*/ CF ACO Instruction /*:inst*/ IfReturn/*:r*/ ACF
		/*{: 
			Data d=new Data("If","","",0,0,0,0);
			Tree if=new Tree("If","",rangIf+1,d,null);  
			if.l.add(condit);
			Data d_then=new Data("then","","",0,0,0,0);
			Tree then=new Tree("then","",rangIf+1,d_condition,null);
			for (Tree t : inst) {
				if (t != null) {
					then.l.add(t);
				}
			}
			then.l.add(r);
			
			if.l.add(condition);
			if.l.add(then);
			RESULT = if;
		:}*/
	|  ifIdentifier CO BooleanExpression CF ACO Instruction/*:inst*/ IfReturn/*:r*/ ACF ElseStatement/*:else*/
		/*{: 
			Data d=new Data("If","","",0,0,0,rangIf+1);
			Tree ifElse=new Tree("If","",0,d,null);  
			if.l.add(condit);
			Data d_then=new Data("then","","",0,0,0,0);
			Tree then=new Tree("then","",1,d_condition,null);
			then.l.add(inst);
			Data d_else=new Data("else","","",0,0,0,rangIf+1);
			Tree else=new Tree("else","",0,d_condition,null);
			else.l.add(else);
			if.l.add(condition);
			if.l.add(then);
			if.l.add(else);
			RESULT = ifElse;
		:}*/;
	//profil : if [i<2]{...}

ElseStatement ::= elseIdentifier ACO Instruction/*:inst*/ IfReturn ACF
		/*{: 
			RESULT = inst ;
		:}*/;

IfReturn ::= returnIdentifier TextRecursive/*:x*/ endLineStatement
		/*{: 
			Data d=new Data("Return","","",0,0,0,0);
			Tree retIf=new Tree("ReturnIf","",0,d,rangIf+1);  
			for (Tree t : x) {
				if (t != null) {
					retIf.l.add(t);
				}
			}
			
			RESULT = retIf;
		:}*/

	| returnIdentifier BooleanExpression endLineStatement
	| returnIdentifier Expression endLineStatement
	| /* nothing*/;

//Boolean operation recursively builded with operators


BooleanExpression ::= bool
	| Expression BooleanOperator Expression
	| notIdentifier BooleanExpression
	| bool equalIdentifier BooleanExpression
	| bool differentIdentifier BooleanExpression
		;


//Boolean operator, used in booleanExpressions

BooleanOperator ::= equalIdentifier
	| higherThanIdentifier
	| higherEqualThanIdentifier
	| lesserThanIdentifier
	| lesserEqualThanIdentifier
	| differentIdentifier
	| orIdentifier
	| andIdentifier
	| xorIdentifier;
  
// The basic while loop


WhileLoopStatement ::= whileIdentifier CO BooleanExpression CF ACO Instruction ACF;
	//profil : while [i<2]{...}

